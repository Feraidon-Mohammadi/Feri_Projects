GitHub chat Notations .

first if in new pc starting gitbash to clone files from repository git hub .need 2 steps :
1- git config --global user.name "your correct name on profile not user name like Feri "
2- git config --global user.email "example@gmail.com"


and than need to activate agent :
eval "$(ssh-agent -s)"
if it show agent pid .... 




after that need to generate the keys ,

first need to Generate a public and privat key , 
the key should be Generate with email adderes:
 ssh-keygen -t rsa -b 4096 -C "example@gmail.com"

dont need to add a name ,warning ,dont add any name ,after upper code it required a name just press Enter and enter and enter 

after that it create 2 files : id_rsa and id_rsa.pub   and 1 folder: .ssh 

those 2 files are creating inside the .ssh folder 

and than u can run this command to see is it created public key correct :
 cat ~/.ssh/id_rsa.pub

if yes you are done and u can copy that key and add it to your GitHub in setting / ssh and gpg keys  add you public key there ,

public key is started with SHA256 ... 


after that u can easily clone your repositories without problem .
to clone need :
 git clone git@github.com:examplename/Repositoryname.git

after that  open the directory where your cloned files are created or added 
open in new terminal gitbash and use git status 

to add data first:
1- git add . 
2- git commit -m "some text for note"
3- git push oringin main / Branch_name


to remove 
1- git rm filename_with_extenstion 
2-git commit -m " uneeded files "

example
git rm  myfile.txt 
git rm commit -m " removed note if u want"



it will remove that file or remove mor files and if the file is in repository inside a folder than so 

2 - git rm folder/filename_with_extension 
git commit -m "removed"



-to remove multiple files from folder 

git rm folder/filename_with_extension  folder/filemname  folder/filename
git commit -m "removed files "

################ after add new repository to create new branch with add new private data  ##########################################
Step 1: Create a Private Repository on GitHub
Log in to your GitHub account.
Click the + icon in the upper-right corner and select New repository.
Name your repository and provide a brief description (optional).
Select Private to ensure that the repository is not visible to the public.
Click Create repository.


step 2:  Set up Your Local Project ---> cd /path/to/your/project
1- git init
2- git add .
3- git commit -m "Initial commit"
4- git remote add origin (new_repository_path_from_git_Hub)
###### if u have branch #######
5-git push -u origin (your_branch_name)

############### if u dont have branch use master or create a branch or new branch #############
it show you your branches: 
5 - git branch 

############### check is branch exist, if not it create that ####################
6- git checkout (your_branch_name)


#### verify Remote URl ###
7- git remote -v
### how to set currect URL ####
8- git remote set-url origin <your-repository-URL>


9- git push -u origin (your_branch_name)















########################################## chat gpt fix ################################

Setting up Git on a New PC
Configure Git with your name and email:

This information is used for commit messages.

git config --global user.name "Your Name"
git config --global user.email "example@gmail.com"
Start the SSH agent:

This is necessary for managing your SSH keys.

eval "$(ssh-agent -s)"
Generate SSH keys:

SSH keys are used for secure communication with GitHub.
Do not enter a passphrase if you wish to avoid entering it every time.

ssh-keygen -t rsa -b 4096 -C "example@gmail.com"
Press Enter to use the default file location and not to set a passphrase.
Check the public key:

Ensure the SSH key was created correctly.

cat ~/.ssh/id_rsa.pub
Add the SSH key to your GitHub account:

Copy the output from the previous command and add it to your GitHub account under Settings > SSH and GPG keys.
Cloning Repositories and Basic Git Operations
Clone a repository:

Use the SSH URL of your GitHub repository.

git clone git@github.com:examplename/Repositoryname.git
Check the status of your repository:


git status
Add changes to staging:

git add .
Commit your changes:


git commit -m "Commit message"
Push changes to the remote repository:

Use the correct branch name, such as main or another branch.

git push origin main
Removing Files
Remove a file:


git rm filename_with_extension
git commit -m "Removed file"
Remove multiple files or files from a folder:


git rm folder/filename_with_extension folder/filename folder/filename
git commit -m "Removed files"
These commands provide a good foundation for basic Git and GitHub operations, covering configuration, secure communication, and version control practices.
















